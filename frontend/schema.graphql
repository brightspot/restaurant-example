schema {
  query: RootQuery
  mutation: RootMutation
}

"""
Specifies if debugging should be enabled for the field. This applies to the current field and all its sub-fields, unless it's redefined with a new value further down the field hierarchy. When enabled, any debugging information captured will be present in the extensions part of the response.
"""
directive @debug(if: Boolean) on FIELD | FRAGMENT_DEFINITION | FRAGMENT_SPREAD | INLINE_FRAGMENT | MUTATION | QUERY | SUBSCRIPTION

"""Provides Field Generator information."""
directive @field_generator(class: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
Marks a field as being backed by a getter method, and therefore the value returned may not match what is stored on the raw state. To instead access the raw state data, the @gca_raw directive can be used on the query field.
"""
directive @gca_getter on FIELD_DEFINITION

"""Provides object field information"""
directive @gca_object_field(embedded: Boolean, indexed: Boolean, internalName: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""Provides object type information"""
directive @gca_object_type(abstract: Boolean, embedded: Boolean, id: ID, internalName: String) on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

"""
When a field's value is null, specifies whether the field's placeholder should be returned instead. This applies to the current field and all its sub-fields, unless it's redefined with a new value further down the field hierarchy.
"""
directive @gca_placeholder(if: Boolean) on FIELD

"""
Specifies if the field's raw State value is preferred over the calculated value of the backing getter method. This applies to the current field and all its sub-fields, unless it's redefined with a new value further down the field hierarchy.
"""
directive @gca_raw(if: Boolean) on FIELD

"""
References other types in the schema by name that are backed by the same Object Type
"""
directive @gca_schema_types(names: String) on INPUT_OBJECT | SCALAR

"""
Specifies if the raw SDL should be included in the response extensions. Introspection queries must be allowed in order for it to take effect.
"""
directive @sdl(if: Boolean) on QUERY

"""Provides Type Generator information."""
directive @type_generator(class: String, id: ID) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

"""Provides Type origin information."""
directive @type_origin(implementedBy: String, implements: String, passedTo: String, possibleTypeOf: String, returnedFrom: String) on ENUM | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @type_stats(directiveCount: Int, enumCount: Int, inputCount: Int, interfaceCount: Int, reservedTypeGeneratorCount: Int, scalarCount: Int, totalCount: Int, typeCount: Int, typeGeneratorCounts: [TypeGeneratorStats], unionCount: Int) on SCHEMA

enum AngularUnit {
  """tk tk tk"""
  DEGREES

  """tk tk tk"""
  METERS

  """tk tk tk"""
  RADIANS
}

input ClearUrlsInput {
  _: Void
}

""""""
type CompositeImageFilter {
  filters: [CompositeImageFilterType!]!
}

union CompositeImageFilterType = GrayscaleFilter | InvertFilter | SepiaFilter

"""Represents a generic content."""
interface Content implements Record & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

input ContentActionContextInput {
  dryRun: Boolean
  lastRead: Long
  site: SiteRefInput
}

type ContentActionTypes {
  Save: SaveAction
}

type ContentActions {
  Action: ContentActionTypes
  Transaction(context: ContentActionContextInput = {}, writes: [TransactionInput!]!): TransactionResult
}

input FromAllInput {
  _: Void
}

input FromInput {
  """Corresponds to the Java method `Query#fromAll`."""
  all: FromAllInput

  """Corresponds to the Java method `Query#from`."""
  class: ID

  """Corresponds to the Java method `Query#fromGroup`."""
  group: ID

  """Corresponds to the Java method `Query#fromType`."""
  type: QueryFromType

  """Corresponds to the Java method `Query#fromType`."""
  typeId: UUID
}

input GenerateUrlsInput {
  _: Void
}

"""tk tk tk"""
input GeoAreaInput {
  geometry: GeoMultiPolygonInput
}

input GeoCircleInput {
  center: GeoPointInput!
  radiusUnit: AngularUnit!
  radiusValue: Float!
}

""""""
input GeoLinearPolygonInput {
  holes: [GeoLinearRingInput!]
  ring: GeoLinearRingInput!
}

""""""
input GeoLinearRingInput {
  points: [GeoPointInput!]!
}

""""""
input GeoMultiPolygonInput {
  polygons: [GeoPolygonInput!]!
}

type GeoPoint {
  latitude: Float
  longitude: Float
}

input GeoPointInput {
  latitude: Float!
  longitude: Float!
}

""""""
input GeoPolygonInput {
  circle: GeoCircleInput
  polygon: GeoLinearPolygonInput
}

"""A type with fields providing the ability to fetch a single record."""
type GetEntry {
  """Provides the ability to fetch a `Recordable` by a unique identifier."""
  Record(
    """Accepts inputs for unique identifiers, such as an ID or URL."""
    with: RecordGetInput!
  ): RecordGet

  """Provides the ability to fetch a `Singleton` instance."""
  Singleton: GetSingleton
}

type GetSingleton {
  """Provides access to **Menu** `Singleton` instance data"""
  Menu: MenuGet

  """Provides access to **Restaurant** `Singleton` instance data"""
  Restaurant: RestaurantGet
}

""""""
type GrayscaleFilter {
  _: Void
}

""""""
type ImageCropBoundingBox {
  """"""
  height: Float!

  """"""
  width: Float!

  """"""
  x: Float!

  """"""
  y: Float!
}

""""""
type ImageCropNamed {
  """"""
  bounds: ImageCropBoundingBox!

  """"""
  name: String!
}

""""""
type ImageCrops {
  """"""
  box(name: String!): ImageCropNamed

  """"""
  boxes: [ImageCropNamed!]!
}

""""""
type ImageEdits {
  """"""
  brightness: Float!

  """"""
  contrast: Float!

  """"""
  filter: ImageFilter

  """"""
  flipH: Boolean!

  """"""
  flipV: Boolean!

  """"""
  rotate: Int!

  """"""
  sharpen: Int!
}

""""""
union ImageFilter = CompositeImageFilter | GrayscaleFilter | InvertFilter | SepiaFilter

""""""
type ImageFocusGroup {
  """"""
  coordinates: ImageFocusPoint!

  """"""
  name: String!
}

""""""
type ImageFocusPoint {
  x: Float!
  y: Float!
}

""""""
type ImageFocuses {
  """"""
  default: ImageFocusPoint

  """"""
  point(name: String!): ImageFocusGroup

  """"""
  points: [ImageFocusGroup!]!
}

"""An image's EXIF orientation."""
enum ImageOrientation {
  """Unknown"""
  EXIF_0_UNKNOWN

  """Normal"""
  EXIF_1_TOP_LEFT

  """Mirror horizontally"""
  EXIF_2_TOP_RIGHT

  """Rotate 180°"""
  EXIF_3_BOTTOM_RIGHT

  """Mirror vertically"""
  EXIF_4_BOTTOM_LEFT

  """Mirror horizontally, rotate 270° clockwise"""
  EXIF_5_LEFT_TOP

  """Rotate 90° clockwise"""
  EXIF_6_RIGHT_TOP

  """Mirror horizontally, rotate 90° clockwise"""
  EXIF_7_RIGHT_BOTTOM

  """Rotate 270° clockwise"""
  EXIF_8_LEFT_BOTTOM
}

"""
An instant in time represented as the number of milliseconds since the epoch.
"""
scalar Instant

""""""
type InvertFilter {
  _: Void
}

"""A JSON scalar"""
scalar Json

scalar LocalDate

scalar LocalTime

"""A 64-bit signed integer"""
scalar Long

type Menu implements Content & PathsField & Record & RecordEntry & Recordable & Singleton {
  SingletonMod: SingletonMod!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _urls: URLs!
  categories: [MenuCategory]
}

type MenuCategory implements Content & PathsField & Record & RecordEntry & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _urls: URLs!
  description: String
  menuItems: [MenuItem]
  name: String
}

input MenuCategoryGetInput {
  """Fetch a **Menu Category** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Menu Category** instance by its unique URL."""
  _url: String
}

"""
Provides access to various fields and related data for the **Menu**, such as state, derivations, previews, views, overlays, and revisions. The availability of certain fields depends on schema configuration and other factors. This type supports querying detailed information, with options for filtering and retrieving specific aspects of the metadata and associated content.
"""
type MenuGet {
  """
  Allows access to the various fields for the given **Menu**, including globals. Note that any configured `GCASchemaSettings#fieldFilter` settings might affect which fields appear here.
  """
  State: Menu

  """
  Gets the current database time. This value can be used as input to save mutations via the lastRead argument as a safeguard against accidentally overwriting data with stale content.
  """
  now: Long!
}

input MenuGetInput {
  """Fetch a **Menu** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Menu** instance by its unique URL."""
  _url: String

  """Fetch a **Menu** instance by its unique **Key**."""
  key: String
}

type MenuItem implements Content & PathsField & PreviewField & Record & RecordEntry & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _preview(height: Int, thumbnail: Boolean, width: Int): StorageItem
  _urls: URLs!
  category: MenuCategory
  description: String
  image: StorageItem
  isGlutenFree: Boolean!
  isSpecial: Boolean!
  isUnavailable: Boolean!
  isVegan: Boolean!
  isVegetarian: Boolean!
  name: String
  price: Float
}

input MenuItemGetInput {
  """Fetch a **Menu Item** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Menu Item** instance by its unique URL."""
  _url: String
}

"""
Metadata about a page of query results that can help to inform how to fetch subsequent pages as well as present the data to an end user.
"""
type PageInfo {
  """The total number of results available in the query."""
  count: Long!

  """The 1-based offset of the first item on the current page."""
  firstItemIndex: Long!

  """The offset for the first page of results. This is always zero."""
  firstOffset: Long!

  """True if there is a next page of results, false otherwise."""
  hasNext: Boolean!

  """True if there are any pages with results, false otherwise."""
  hasPages: Boolean!

  """True if there is a previous page of results, false otherwise."""
  hasPrevious: Boolean!

  """The 1-based offset of the last item on the current page."""
  lastItemIndex: Long!

  """The offset for the last page of results."""
  lastOffset: Long!

  """The maximum number of results to fetch in a single query."""
  limit: Int!

  """The offset for the next page of results."""
  nextOffset: Long!

  """
  Gets the current database time. This value can be used as input to save mutations via the lastRead argument as a safeguard against accidentally overwriting data with stale content.
  """
  now: Long!

  """The offset of the current page in the overall query results."""
  offset: Long!

  """The total number of pages available in the query."""
  pageCount: Long!

  """The current page number within this result set."""
  pageIndex: Long!

  """
  The offset for the previous page of results. If there is no previous page, then zero is returned.
  """
  previousOffset: Long!
}

interface PathsField {
  _urls: URLs!
}

""""""
interface PreviewField {
  _preview(height: Int, thumbnail: Boolean, width: Int): StorageItem
}

type QueryEntry {
  """Provides fields for accessing the Dari `Query` API."""
  Records(
    """Allows for specifying the source type(s) for the `Query`."""
    from: FromInput!

    """Allows for specifying the **having** predicate for the `Query`."""
    having: QueryPredicateInput

    """Allows for specifying the pagination **limit** for the `Query` result."""
    limit: Int

    """
    Allows for specifying the pagination **offset** for the `Query` result.
    """
    offset: Long

    """Allows for specifying the **options** for the `Query`."""
    options: QueryOptionsInput

    """Allows for specifying the **sort** type for the `Query`."""
    sortBy: [QuerySortInput!]

    """Allows for specifying the **where** predicate for the `Query`."""
    where: QueryPredicateInput
  ): QuerySelect
}

enum QueryFromType {
  MenuCategory
  MenuItem
  Reservation
  RestaurantLocation
}

input QueryMissingPredicateValueInput {
  _: Void
}

input QueryOptionsCustomInput {
  key: String!
  value: String
}

input QueryOptionsInput {
  custom: [QueryOptionsCustomInput!]
  master: Boolean
  noCache: Boolean
  noLatentCache: Boolean
  referenceOnly: Boolean
  resolveInvisible: Boolean
  resolveToReferenceOnly: Boolean
  timeout: Float
}

input QueryPhrasePredicateValueInput {
  phrase: String
  proximity: Int
  weight: Float
}

input QueryPredicateInput {
  """
  Specifies the values for argument placeholders in the `Query` predicate.
  """
  arguments: [[String]]

  """Specifies particular named argument values."""
  namedValues: [QueryPredicateNamedValueInput]

  """Specifies the predicate for the `Query`."""
  predicate: String
}

input QueryPredicateNamedValueInput {
  name: String!
  value: QueryPredicateValueInput!
}

input QueryPredicateValueInput {
  Missing: QueryMissingPredicateValueInput
  QueryPhrase: QueryPhrasePredicateValueInput
  QueryWildcardPhrase: QueryWildcardPhrasePredicateValueInput
  Region: GeoAreaInput
}

"""Represents the result of a Dari `Query#select`."""
type QuerySelect {
  """The `Record` items in a page of `Query` results."""
  items: [RecordEntry!]!

  """Metadata about a page of `Query` results."""
  pageInfo: PageInfo!
}

input QuerySortByAgeInput {
  field: String!
  order: SortByAge!
  weight: Float!
}

input QuerySortByDistanceInput {
  field: String!
  order: SortByDistance!
  point: GeoPointInput!
}

input QuerySortByFieldInput {
  name: String!
  order: SortByField!
}

input QuerySortByRelevanceInput {
  predicate: QueryPredicateInput!
  weight: Float!
}

input QuerySortInput {
  age: QuerySortByAgeInput
  distance: QuerySortByDistanceInput
  field: QuerySortByFieldInput
  relevance: QuerySortByRelevanceInput
}

input QueryWildcardPhrasePredicateValueInput {
  query: String!
}

interface Record implements Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

interface RecordEntry implements Record & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

"""
Provides access to various fields and related data for the **Record**, such as state, derivations, previews, views, overlays, and revisions. The availability of certain fields depends on schema configuration and other factors. This type supports querying detailed information, with options for filtering and retrieving specific aspects of the metadata and associated content.
"""
type RecordGet {
  """
  Allows access to the various fields for the given **Record**, including globals. Note that any configured `GCASchemaSettings#fieldFilter` settings might affect which fields appear here.
  """
  State: RecordEntry

  """
  Gets the current database time. This value can be used as input to save mutations via the lastRead argument as a safeguard against accidentally overwriting data with stale content.
  """
  now: Long!
}

input RecordGetByTypeInput {
  """Fetch a **Menu** instance by a unique identifier."""
  Menu: MenuGetInput

  """Fetch a **Menu Category** instance by a unique identifier."""
  MenuCategory: MenuCategoryGetInput

  """Fetch a **Menu Item** instance by a unique identifier."""
  MenuItem: MenuItemGetInput

  """Fetch a **Reservation** instance by a unique identifier."""
  Reservation: ReservationGetInput

  """Fetch a **Restaurant** instance by a unique identifier."""
  Restaurant: RestaurantGetInput

  """Fetch a **Restaurant Location** instance by a unique identifier."""
  RestaurantLocation: RestaurantLocationGetInput
}

input RecordGetInput {
  """Fetch a **Record** instance by its unique Record ID."""
  _id: UUID

  """Fetch a specific **Record** type."""
  _type: RecordGetByTypeInput

  """Fetch a **Record** instance by its unique URL."""
  _url: String
}

"""`@oneOf` input type for saving a **Record** instance."""
input RecordMainDiffInput {
  """Input type for saving a **Reservation** instance"""
  ReservationDiff: ReservationInput
}

interface RecordMutationEntry implements Record & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

input RecordMutationGetInput {
  """Fetch a **Record** instance by its unique Record ID."""
  _id: UUID
  _ref: ID

  """Fetch a specific **Record** type."""
  _type: RecordGetByTypeInput

  """Fetch a **Record** instance by its unique URL."""
  _url: String
}

type RecordRef implements Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID
  _type: ID
}

input RecordSaveActionInput {
  main: RecordMainDiffInput
  urls: [URLsInput]
  with: RecordMutationGetInput
}

"""
The super interface for all types backed by data models, e.g. Java  classes that implement `Recordable`. This interface declares a single `_id` field containing the UUID of the record. A corresponding `_type` field is intentionally omitted as it can be derived programmatically from the built-in GraphQL `__typename` field. Each GraphQL `type` that implements this interface will be annotated  with the `@gca_object_type` directive which contains the backing data model's type ID.
"""
interface Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID
}

type Reservation implements Content & PathsField & Record & RecordEntry & RecordMutationEntry & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _urls: URLs!
  confirmationNumber: String
  createdDate: Instant
  customerEmail: String
  customerName: String
  customerPhone: String
  location: RestaurantLocation
  partySize: Int
  reservationDate: LocalDate
  reservationTime: LocalTime
  specialRequests: String
  status: ReservationStatus
}

input ReservationGetInput {
  """Fetch a **Reservation** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Reservation** instance by its unique URL."""
  _url: String
}

"""An input type for writing a **Reservation** instance."""
input ReservationInput {
  """The unique ID for an existing embedded `Record`."""
  _id: UUID

  """
  A name for a new `Record` that can be used as a reference when the unique system-assigned ID is not yet available.
  """
  _name: ID

  """"""
  confirmationNumber: String

  """"""
  createdDate: Instant

  """"""
  customerEmail: String

  """"""
  customerName: String

  """"""
  customerPhone: String

  """"""
  location: RestaurantLocationDiffRefInput

  """"""
  partySize: Int

  """"""
  reservationDate: LocalDate

  """"""
  reservationTime: LocalTime

  """"""
  specialRequests: String

  """"""
  status: ReservationStatus
}

enum ReservationStatus {
  CANCELLED
  COMPLETED
  CONFIRMED
  NO_SHOW
  PENDING
}

type Restaurant implements Content & PathsField & Record & RecordEntry & Recordable & Singleton {
  SingletonMod: SingletonMod!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _urls: URLs!
  description: String
  email: String
  name: String
  website: String
}

"""
Provides access to various fields and related data for the **Restaurant**, such as state, derivations, previews, views, overlays, and revisions. The availability of certain fields depends on schema configuration and other factors. This type supports querying detailed information, with options for filtering and retrieving specific aspects of the metadata and associated content.
"""
type RestaurantGet {
  """
  Allows access to the various fields for the given **Restaurant**, including globals. Note that any configured `GCASchemaSettings#fieldFilter` settings might affect which fields appear here.
  """
  State: Restaurant

  """
  Gets the current database time. This value can be used as input to save mutations via the lastRead argument as a safeguard against accidentally overwriting data with stale content.
  """
  now: Long!
}

input RestaurantGetInput {
  """Fetch a **Restaurant** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Restaurant** instance by its unique URL."""
  _url: String

  """Fetch a **Restaurant** instance by its unique **Key**."""
  key: String
}

type RestaurantLocation implements Content & PathsField & Record & RecordEntry & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _urls: URLs!
  accessibilityInfo: String
  address: String
  image: StorageItem
  isMainLocation: Boolean!
  name: String
  openHours: String
  parkingInfo: String
  phoneNumber: String
}

input RestaurantLocationDiffRefInput {
  """Fetch a **Restaurant Location** instance by its unique Record ID."""
  _id: UUID
  _ref: ID

  """Fetch a **Restaurant Location** instance by its unique URL."""
  _url: String
}

input RestaurantLocationGetInput {
  """Fetch a **Restaurant Location** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Restaurant Location** instance by its unique URL."""
  _url: String
}

type RootMutation {
  Content: ContentActions
}

"""
The root `query` type, granting access to all the major GCA read operations.
"""
type RootQuery {
  """
  Fetch a single record by a unique identifier. This field is present when there is at least 1 read (or write) content type included as an entry type. See `GCASchemaSettings#getReadEntryTypes` and `GCASchemaSettings#getReadWriteEntryTypes` for more information.
  """
  Get: GetEntry

  """
  Select multiple records at once. This is a bridge to the Dari Query API in Java. This field's inclusion rules are similar to that of `Get` but it can be omitted if either `GCASchemaSettings#isOnlyAllowUniqueIndexLookups` or `GCASchemaSettings#isExcludeQueryFromAllWhenOnlySingletonEntryFields` returns true.
  """
  Query: QueryEntry
}

type SaveAction {
  Record(args: RecordSaveActionInput!, context: ContentActionContextInput = {}): SaveActionResult
}

type SaveActionResult {
  saveInfo: SaveActionResultInfo
  state: RecordMutationEntry
}

type SaveActionResultInfo {
  appliedDiffs: Json
  submittedDiffs: Json
}

input SaveActionTransactionInput {
  Record: RecordSaveActionInput
}

""""""
type SepiaFilter {
  _: Void
}

interface Singleton implements Record & Recordable {
  SingletonMod: SingletonMod!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

type SingletonData {
  key: String
}

"""
Group of modifications of the [Singleton](#docs-link:Singleton) type, where each field corresponds to a Java class that declares a group of fields.
"""
type SingletonMod {
  """
  Modification fields declared by [SingletonData](#docs-link:SingletonData).
  """
  SingletonData: SingletonData!
}

input SiteRefInput {
  """Fetch a **Site** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Site** instance by its unique **Name**."""
  name: String

  """Fetch a **Site** instance by its unique **URLs**."""
  urls: String
}

enum SortByAge {
  NEWEST
  OLDEST
}

enum SortByDistance {
  CLOSEST
  FARTHEST
}

enum SortByField {
  ASCENDING
  DESCENDING
}

"""
An item in a storage system, as represented in the Dari StorageItem Java API.
"""
type StorageItem {
  contentType: String
  httpHeaders(first: Boolean, name: String): Json!
  inStorage: Boolean!
  media: StorageItemMedia
  metadata(key: String): Json
  path: String
  private: Boolean!
  publicUrl: String
  securePublicUrl: String
  storage: String
}

union StorageItemMedia = StorageItemMedia__Image

""""""
type StorageItemMedia__Image {
  """"""
  byline: String

  """"""
  caption: String

  """"""
  copyrightNotice: String

  """"""
  credit: String

  """"""
  crop: ImageCrops

  """"""
  dateTaken: Long

  """"""
  edits: ImageEdits!

  """"""
  focus: ImageFocuses!

  """"""
  height: Int

  """"""
  keywords: [String!]
  location: GeoPoint

  """"""
  orientation: ImageOrientation

  """"""
  source: String

  """"""
  title: String

  """"""
  width: Int
}

union TransactionContentActionResult = SaveActionResult

input TransactionInput {
  Save: SaveActionTransactionInput
}

type TransactionResult {
  results: [TransactionContentActionResult!]!
  status: String
}

input TypeGeneratorStats {
  className: String
  count: Int
}

type URLs {
  paths: [URLsPath!]!
  permalink(site: SiteRefInput): String
}

input URLsInput {
  add: URLsPathInput
  clear: ClearUrlsInput
  generate: GenerateUrlsInput
  remove: String
}

type URLsPath {
  path: String
  site: RecordRef
  type: URLsPathType
}

input URLsPathInput {
  path: String!
  type: URLsPathType!
}

enum URLsPathType {
  ALIAS
  PERMALINK
  REDIRECT
  REDIRECT_TEMPORARY
}

"""A universally unique identifier compliant UUID Scalar"""
scalar UUID

"""
Reserved as the return type for special fields added to types and/or interfaces that would otherwise have no fields. The GraphQL spec does not support empty types and this field return type is used to circumvent that requirement. Fields of this type are named "_" and are marked as @deprecated to signify that they should be ignored.
"""
scalar Void