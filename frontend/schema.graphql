schema {
  query: RootQuery
}

"""
Marks a field as being backed by a getter method, and therefore the value returned may not match what is stored on the raw state. To instead access the raw state data, the @gca_raw directive can be used on the query field.
"""
directive @gca_getter on FIELD_DEFINITION

"""Provides object field information"""
directive @gca_object_field(embedded: Boolean, indexed: Boolean, internalName: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""Provides object type information"""
directive @gca_object_type(abstract: Boolean, embedded: Boolean, id: ID, internalName: String) on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

"""
When a field's value is null, specifies whether the field's placeholder should be returned instead. This applies to the current field and all its sub-fields, unless it's redefined with a new value further down the field hierarchy.
"""
directive @gca_placeholder(if: Boolean) on FIELD

"""
Specifies if the field's raw State value is preferred over the calculated value of the backing getter method. This applies to the current field and all its sub-fields, unless it's redefined with a new value further down the field hierarchy.
"""
directive @gca_raw(if: Boolean) on FIELD

"""
References other types in the schema by name that are backed by the same Object Type
"""
directive @gca_schema_types(names: String) on INPUT_OBJECT | SCALAR

"""
Specifies if the raw SDL should be included in the response extensions. Introspection queries must be allowed in order for it to take effect.
"""
directive @sdl(if: Boolean) on QUERY

"""Represents a generic content."""
interface Content implements Record & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

"""A type with fields providing the ability to fetch a single record."""
type GetEntry {
  """Provides the ability to fetch a `Singleton` instance."""
  Singleton: GetSingleton
}

type GetSingleton {
  """Provides access to **Restaurant** `Singleton` instance data"""
  Restaurant: RestaurantGet
}

"""A 64-bit signed integer"""
scalar Long

interface PathsField {
  _urls: URLs!
}

interface Record implements Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

interface RecordEntry implements Record & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

type RecordRef implements Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID
  _type: ID
}

"""
The super interface for all types backed by data models, e.g. Java  classes that implement `Recordable`. This interface declares a single `_id` field containing the UUID of the record. A corresponding `_type` field is intentionally omitted as it can be derived programmatically from the built-in GraphQL `__typename` field. Each GraphQL `type` that implements this interface will be annotated  with the `@gca_object_type` directive which contains the backing data model's type ID.
"""
interface Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID
}

type Restaurant implements Content & PathsField & Record & RecordEntry & Recordable & Singleton {
  SingletonMod: SingletonMod!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _urls: URLs!
  description: String
  email: String
  name: String
  website: String
}

"""
Provides access to various fields and related data for the **Restaurant**, such as state, derivations, previews, views, overlays, and revisions. The availability of certain fields depends on schema configuration and other factors. This type supports querying detailed information, with options for filtering and retrieving specific aspects of the metadata and associated content.
"""
type RestaurantGet {
  """
  Allows access to the various fields for the given **Restaurant**, including globals. Note that any configured `GCASchemaSettings#fieldFilter` settings might affect which fields appear here.
  """
  State: Restaurant

  """
  Gets the current database time. This value can be used as input to save mutations via the lastRead argument as a safeguard against accidentally overwriting data with stale content.
  """
  now: Long!
}

"""
The root `query` type, granting access to all the major GCA read operations.
"""
type RootQuery {
  """
  Fetch a single record by a unique identifier. This field is present when there is at least 1 read (or write) content type included as an entry type. See `GCASchemaSettings#getReadEntryTypes` and `GCASchemaSettings#getReadWriteEntryTypes` for more information.
  """
  Get: GetEntry
}

interface Singleton implements Record & Recordable {
  SingletonMod: SingletonMod!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

type SingletonData {
  key: String
}

"""
Group of modifications of the [Singleton](#docs-link:Singleton) type, where each field corresponds to a Java class that declares a group of fields.
"""
type SingletonMod {
  """
  Modification fields declared by [SingletonData](#docs-link:SingletonData).
  """
  SingletonData: SingletonData!
}

input SiteRefInput {
  """Fetch a **Site** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Site** instance by its unique **Name**."""
  name: String

  """Fetch a **Site** instance by its unique **URLs**."""
  urls: String
}

type URLs {
  paths: [URLsPath!]!
  permalink(site: SiteRefInput): String
}

type URLsPath {
  path: String
  site: RecordRef
  type: URLsPathType
}

enum URLsPathType {
  ALIAS
  PERMALINK
  REDIRECT
  REDIRECT_TEMPORARY
}

"""A universally unique identifier compliant UUID Scalar"""
scalar UUID