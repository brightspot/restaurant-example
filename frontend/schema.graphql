schema {
  query: RootQuery
}

"""
Marks a field as being backed by a getter method, and therefore the value returned may not match what is stored on the raw state. To instead access the raw state data, the @gca_raw directive can be used on the query field.
"""
directive @gca_getter on FIELD_DEFINITION

"""Provides object field information"""
directive @gca_object_field(embedded: Boolean, indexed: Boolean, internalName: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""Provides object type information"""
directive @gca_object_type(abstract: Boolean, embedded: Boolean, id: ID, internalName: String) on FIELD_DEFINITION | INTERFACE | OBJECT | UNION

"""
When a field's value is null, specifies whether the field's placeholder should be returned instead. This applies to the current field and all its sub-fields, unless it's redefined with a new value further down the field hierarchy.
"""
directive @gca_placeholder(if: Boolean) on FIELD

"""
Specifies if the field's raw State value is preferred over the calculated value of the backing getter method. This applies to the current field and all its sub-fields, unless it's redefined with a new value further down the field hierarchy.
"""
directive @gca_raw(if: Boolean) on FIELD

"""
References other types in the schema by name that are backed by the same Object Type
"""
directive @gca_schema_types(names: String) on INPUT_OBJECT | SCALAR

"""
Specifies if the raw SDL should be included in the response extensions. Introspection queries must be allowed in order for it to take effect.
"""
directive @sdl(if: Boolean) on QUERY

type BulkUploadDraft {
  containerId: String
  uploadId: UUID
}

"""Modification for objects that are part of a collection."""
type CollectionObjectModification {
  collections: [UUID]
}

type ColorDistribution implements Record & Recordable {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  n_0_0_0: Float
  n_0_0_20: Float
  n_0_0_40: Float
  n_0_0_60: Float
  n_0_0_80: Float
  n_0_0_100: Float
  n_0_40_20: Float
  n_0_40_40: Float
  n_0_40_60: Float
  n_0_40_80: Float
  n_0_60_20: Float
  n_0_60_40: Float
  n_0_60_60: Float
  n_0_60_80: Float
  n_0_80_20: Float
  n_0_80_40: Float
  n_0_80_60: Float
  n_0_80_80: Float
  n_0_100_20: Float
  n_0_100_40: Float
  n_0_100_60: Float
  n_0_100_80: Float
  n_24_40_20: Float
  n_24_40_40: Float
  n_24_40_60: Float
  n_24_40_80: Float
  n_24_60_20: Float
  n_24_60_40: Float
  n_24_60_60: Float
  n_24_60_80: Float
  n_24_80_20: Float
  n_24_80_40: Float
  n_24_80_60: Float
  n_24_80_80: Float
  n_24_100_20: Float
  n_24_100_40: Float
  n_24_100_60: Float
  n_24_100_80: Float
  n_48_40_20: Float
  n_48_40_40: Float
  n_48_40_60: Float
  n_48_40_80: Float
  n_48_60_20: Float
  n_48_60_40: Float
  n_48_60_60: Float
  n_48_60_80: Float
  n_48_80_20: Float
  n_48_80_40: Float
  n_48_80_60: Float
  n_48_80_80: Float
  n_48_100_20: Float
  n_48_100_40: Float
  n_48_100_60: Float
  n_48_100_80: Float
  n_72_40_20: Float
  n_72_40_40: Float
  n_72_40_60: Float
  n_72_40_80: Float
  n_72_60_20: Float
  n_72_60_40: Float
  n_72_60_60: Float
  n_72_60_80: Float
  n_72_80_20: Float
  n_72_80_40: Float
  n_72_80_60: Float
  n_72_80_80: Float
  n_72_100_20: Float
  n_72_100_40: Float
  n_72_100_60: Float
  n_72_100_80: Float
  n_96_40_20: Float
  n_96_40_40: Float
  n_96_40_60: Float
  n_96_40_80: Float
  n_96_60_20: Float
  n_96_60_40: Float
  n_96_60_60: Float
  n_96_60_80: Float
  n_96_80_20: Float
  n_96_80_40: Float
  n_96_80_60: Float
  n_96_80_80: Float
  n_96_100_20: Float
  n_96_100_40: Float
  n_96_100_60: Float
  n_96_100_80: Float
  n_120_40_20: Float
  n_120_40_40: Float
  n_120_40_60: Float
  n_120_40_80: Float
  n_120_60_20: Float
  n_120_60_40: Float
  n_120_60_60: Float
  n_120_60_80: Float
  n_120_80_20: Float
  n_120_80_40: Float
  n_120_80_60: Float
  n_120_80_80: Float
  n_120_100_20: Float
  n_120_100_40: Float
  n_120_100_60: Float
  n_120_100_80: Float
  n_144_40_20: Float
  n_144_40_40: Float
  n_144_40_60: Float
  n_144_40_80: Float
  n_144_60_20: Float
  n_144_60_40: Float
  n_144_60_60: Float
  n_144_60_80: Float
  n_144_80_20: Float
  n_144_80_40: Float
  n_144_80_60: Float
  n_144_80_80: Float
  n_144_100_20: Float
  n_144_100_40: Float
  n_144_100_60: Float
  n_144_100_80: Float
  n_168_40_20: Float
  n_168_40_40: Float
  n_168_40_60: Float
  n_168_40_80: Float
  n_168_60_20: Float
  n_168_60_40: Float
  n_168_60_60: Float
  n_168_60_80: Float
  n_168_80_20: Float
  n_168_80_40: Float
  n_168_80_60: Float
  n_168_80_80: Float
  n_168_100_20: Float
  n_168_100_40: Float
  n_168_100_60: Float
  n_168_100_80: Float
  n_192_40_20: Float
  n_192_40_40: Float
  n_192_40_60: Float
  n_192_40_80: Float
  n_192_60_20: Float
  n_192_60_40: Float
  n_192_60_60: Float
  n_192_60_80: Float
  n_192_80_20: Float
  n_192_80_40: Float
  n_192_80_60: Float
  n_192_80_80: Float
  n_192_100_20: Float
  n_192_100_40: Float
  n_192_100_60: Float
  n_192_100_80: Float
  n_216_40_20: Float
  n_216_40_40: Float
  n_216_40_60: Float
  n_216_40_80: Float
  n_216_60_20: Float
  n_216_60_40: Float
  n_216_60_60: Float
  n_216_60_80: Float
  n_216_80_20: Float
  n_216_80_40: Float
  n_216_80_60: Float
  n_216_80_80: Float
  n_216_100_20: Float
  n_216_100_40: Float
  n_216_100_60: Float
  n_216_100_80: Float
  n_240_40_20: Float
  n_240_40_40: Float
  n_240_40_60: Float
  n_240_40_80: Float
  n_240_60_20: Float
  n_240_60_40: Float
  n_240_60_60: Float
  n_240_60_80: Float
  n_240_80_20: Float
  n_240_80_40: Float
  n_240_80_60: Float
  n_240_80_80: Float
  n_240_100_20: Float
  n_240_100_40: Float
  n_240_100_60: Float
  n_240_100_80: Float
  n_264_40_20: Float
  n_264_40_40: Float
  n_264_40_60: Float
  n_264_40_80: Float
  n_264_60_20: Float
  n_264_60_40: Float
  n_264_60_60: Float
  n_264_60_80: Float
  n_264_80_20: Float
  n_264_80_40: Float
  n_264_80_60: Float
  n_264_80_80: Float
  n_264_100_20: Float
  n_264_100_40: Float
  n_264_100_60: Float
  n_264_100_80: Float
  n_288_40_20: Float
  n_288_40_40: Float
  n_288_40_60: Float
  n_288_40_80: Float
  n_288_60_20: Float
  n_288_60_40: Float
  n_288_60_60: Float
  n_288_60_80: Float
  n_288_80_20: Float
  n_288_80_40: Float
  n_288_80_60: Float
  n_288_80_80: Float
  n_288_100_20: Float
  n_288_100_40: Float
  n_288_100_60: Float
  n_288_100_80: Float
  n_312_40_20: Float
  n_312_40_40: Float
  n_312_40_60: Float
  n_312_40_80: Float
  n_312_60_20: Float
  n_312_60_40: Float
  n_312_60_60: Float
  n_312_60_80: Float
  n_312_80_20: Float
  n_312_80_40: Float
  n_312_80_60: Float
  n_312_80_80: Float
  n_312_100_20: Float
  n_312_100_40: Float
  n_312_100_60: Float
  n_312_100_80: Float
  n_336_40_20: Float
  n_336_40_40: Float
  n_336_40_60: Float
  n_336_40_80: Float
  n_336_60_20: Float
  n_336_60_40: Float
  n_336_60_60: Float
  n_336_60_80: Float
  n_336_80_20: Float
  n_336_80_40: Float
  n_336_80_60: Float
  n_336_80_80: Float
  n_336_100_20: Float
  n_336_100_40: Float
  n_336_100_60: Float
  n_336_100_80: Float
}

type ColorDistribution__Data {
  distribution: ColorDistribution
}

""""""
type CompositeImageFilter {
  filters: [CompositeImageFilterType!]!
}

union CompositeImageFilterType = GrayscaleFilter | InvertFilter | SepiaFilter

"""Represents a generic content."""
interface Content implements Record & Recordable {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

type ContentTemplateSource {
  source: RecordRef
  sourceId: UUID
}

"""Modification that adds CMS content information."""
type Content__ObjectModification {
  """Returns the date when the given `object` was created."""
  createDate: Date

  """Returns the tool user that created the given `object`."""
  createUser: RecordRef
  draft: Boolean
  overlaid: Boolean

  """Returns the date when the given `object` was published."""
  publishDate: Date

  """Returns the tool user that published the given `object`."""
  publishUser: RecordRef
  scheduleDate: Date
  scheduled: Boolean
  trash: Boolean

  """Returns the date when the given `object` was last updated."""
  updateDate: Date

  """Returns the tool user that last updated the given `object`."""
  updateUser: RecordRef
}

"""A timestamp represented as the number of milliseconds since the epoch."""
scalar Date

type Directory__Data {
  automaticRawPaths: [String]

  """Returns whether or not this object contains any paths."""
  hasPath: Boolean
}

"""Modification that adds directory information."""
type Directory__ObjectModification {
  """Returns the object name."""
  objectName: String

  """Returns the path types."""
  pathTypes: MapOfDirectory__PathType
  paths: [String]

  """Returns the paths mode."""
  pathsMode: Directory__PathsMode
}

enum Directory__PathType {
  ALIAS
  PERMALINK
  REDIRECT
  REDIRECT_TEMPORARY
}

enum Directory__PathsMode {
  AUTOMATIC
  MANUAL
}

type Draft__NameData {
  index: Int
}

type ExternalContentRichTextElement implements Record & Recordable & RichTextElement {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  maximumHeight: Int
  maximumWidth: Int
  url: String
}

type ExternalItemImported {
  converterType: RecordRef
  itemId: String
  sourceType: String
}

type GeoPoint {
  latitude: Float
  longitude: Float
}

"""A type with fields providing the ability to fetch a single record."""
type GetEntry {
  """Provides the ability to fetch a `Singleton` instance."""
  Singleton: GetSingleton
}

type GetSingleton {
  """Provides access to **Restaurant** `Singleton` instance data"""
  Restaurant: RestaurantGet
}

"""
Contains global modification data for a **Record** where each field corresponds to a java class that declares a group of global fields.
"""
type Globals {
  """
  Modification fields declared by [BulkUploadDraft](#docs-link:BulkUploadDraft).
  """
  BulkUploadDraft: BulkUploadDraft!

  """Modification for objects that are part of a collection."""
  CollectionObjectModification: CollectionObjectModification!

  """
  Modification fields declared by [Data](#docs-link:ColorDistribution__Data).
  """
  ColorDistribution__Data: ColorDistribution__Data!

  """
  Modification fields declared by [ContentTemplateSource](#docs-link:ContentTemplateSource).
  """
  ContentTemplateSource: ContentTemplateSource!

  """Modification that adds CMS content information."""
  Content__ObjectModification: Content__ObjectModification!

  """Modification fields declared by [Data](#docs-link:Directory__Data)."""
  Directory__Data: Directory__Data!

  """Modification that adds directory information."""
  Directory__ObjectModification: Directory__ObjectModification!

  """
  Modification fields declared by [NameData](#docs-link:Draft__NameData).
  """
  Draft__NameData: Draft__NameData!

  """
  Modification fields declared by [ExternalItemImported](#docs-link:ExternalItemImported).
  """
  ExternalItemImported: ExternalItemImported!

  """
  Global modification that allows storage of all the contextual edits for the assets within an object.
  """
  ImageMetadataOverrideData: ImageMetadataOverrideData!

  """
  Modification fields declared by [SiteCopierObjectModification](#docs-link:SiteCopierObjectModification).
  """
  SiteCopierObjectModification: SiteCopierObjectModification!

  """Modification that adds object accessibility information per site."""
  Site__ObjectModification: Site__ObjectModification!

  """
  Users that are interested in "watching" a piece of content for changes.
  """
  WatcherObjectModification: WatcherObjectModification!

  """Modification fields declared by [Data](#docs-link:WorkStream__Data)."""
  WorkStream__Data: WorkStream__Data!

  """Modification fields declared by [Data](#docs-link:Workflow__Data)."""
  Workflow__Data: Workflow__Data!
}

""""""
type GrayscaleFilter {
  _: Void
}

type GuideFieldImageRichTextElement implements PreviewField & Record & Recordable & RichTextElement {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _preview(height: Int, thumbnail: Boolean, width: Int): StorageItem
  alignment: GuideFieldImageRichTextElement__Alignment
  altText: String
  imageFile: StorageItem
}

enum GuideFieldImageRichTextElement__Alignment {
  CENTER
  RIGHT
}

type GuideFieldLinkRichTextElement implements Record & Recordable & RichTextElement {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  linkText: String
  url: String
}

""""""
type ImageCropBoundingBox {
  """"""
  height: Float!

  """"""
  width: Float!

  """"""
  x: Float!

  """"""
  y: Float!
}

""""""
type ImageCropNamed {
  """"""
  bounds: ImageCropBoundingBox!

  """"""
  name: String!
}

""""""
type ImageCrops {
  """"""
  box(name: String!): ImageCropNamed

  """"""
  boxes: [ImageCropNamed!]!
}

""""""
type ImageEdits {
  """"""
  brightness: Float!

  """"""
  contrast: Float!

  """"""
  filter: ImageFilter

  """"""
  flipH: Boolean!

  """"""
  flipV: Boolean!

  """"""
  rotate: Int!

  """"""
  sharpen: Int!
}

""""""
union ImageFilter = CompositeImageFilter | GrayscaleFilter | InvertFilter | SepiaFilter

""""""
type ImageFocusGroup {
  """"""
  coordinates: ImageFocusPoint!

  """"""
  name: String!
}

""""""
type ImageFocusPoint {
  x: Float!
  y: Float!
}

""""""
type ImageFocuses {
  """"""
  default: ImageFocusPoint

  """"""
  point(name: String!): ImageFocusGroup

  """"""
  points: [ImageFocusGroup!]!
}

"""
Represents image editing data that is a result of contextual editing of an asset.
"""
type ImageMetadataOverride implements Record & Recordable {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  metadata: MapOfJson
  path: String
  targetField: String
  targetId: UUID
}

"""
Global modification that allows storage of all the contextual edits for the assets within an object.
"""
type ImageMetadataOverrideData {
  overrides: [ImageMetadataOverride]
}

"""An image's EXIF orientation."""
enum ImageOrientation {
  """Unknown"""
  EXIF_0_UNKNOWN

  """Normal"""
  EXIF_1_TOP_LEFT

  """Mirror horizontally"""
  EXIF_2_TOP_RIGHT

  """Rotate 180°"""
  EXIF_3_BOTTOM_RIGHT

  """Mirror vertically"""
  EXIF_4_BOTTOM_LEFT

  """Mirror horizontally, rotate 270° clockwise"""
  EXIF_5_LEFT_TOP

  """Rotate 90° clockwise"""
  EXIF_6_RIGHT_TOP

  """Mirror horizontally, rotate 90° clockwise"""
  EXIF_7_RIGHT_BOTTOM

  """Rotate 270° clockwise"""
  EXIF_8_LEFT_BOTTOM
}

""""""
type InvertFilter {
  _: Void
}

"""A JSON scalar"""
scalar Json

"""A 64-bit signed integer"""
scalar Long

type MapOfDirectory__PathType {
  entries: [MapOfDirectory__PathTypeEntry!]!
  get(key: String!): Directory__PathType
}

type MapOfDirectory__PathTypeEntry {
  key: String!
  value: Directory__PathType
}

type MapOfJson {
  entries: [MapOfJsonEntry!]!
  get(key: String!): Json
}

type MapOfJsonEntry {
  key: String!
  value: Json
}

type Mark {
  data: MarkData
  descendants: Int!
  end: Int!
  start: Int!
}

union MarkData = ExternalContentRichTextElement | GuideFieldImageRichTextElement | GuideFieldLinkRichTextElement | MarkDataHtmlElement | MentionRichTextElement | ReferenceRichTextElement

type MarkDataHtmlAttribute {
  name: String!
  value: String!
}

type MarkDataHtmlElement {
  attributes: [MarkDataHtmlAttribute!]!
  name: String!
}

type MarkedText {
  marks: [Mark!]!
  text: String!
}

type MentionRichTextElement implements Record & Recordable & RichTextElement {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  user: RecordRef
}

interface PathsField {
  _urls: URLs!
}

""""""
interface PreviewField {
  _preview(height: Int, thumbnail: Boolean, width: Int): StorageItem
}

interface Record implements Recordable {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

interface RecordEntry implements Record & Recordable {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

type RecordRef implements RecordRefField & Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID
  _type: ID
}

interface RecordRefField implements Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID
}

"""
The super interface for all types backed by data models, e.g. Java  classes that implement `Recordable`. This interface declares a single `_id` field containing the UUID of the record. A corresponding `_type` field is intentionally omitted as it can be derived programmatically from the built-in GraphQL `__typename` field. Each GraphQL `type` that implements this interface will be annotated  with the `@gca_object_type` directive which contains the backing data model's type ID.
"""
interface Recordable {
  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID
}

type Reference implements Record & Recordable {
  ReferenceMod: ReferenceMod!

  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  object: RecordRefField
}

"""
Group of modifications of the [Reference](#docs-link:Reference) type, where each field corresponds to a Java class that declares a group of fields.
"""
type ReferenceMod {
  """
  Modification fields declared by [RichTextReference](#docs-link:RichTextReference).
  """
  RichTextReference: RichTextReference!
}

"RichTextElement implementation that represents Reference objects, also known as RTE enhancements. \nNote that this class isn't annotated with \ncom.psddev.cms.db.RichTextElement.Tag on purpose to prevent it from being displayed in the rich text editor UI. Instances of this class are only created at runtime by RichTextViewBuilder when using any of its `build` APIs that accept ReferentialText as a parameter.\n\n"
type ReferenceRichTextElement implements Record & Recordable & RichTextElement {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  reference: Reference
}

type Restaurant implements Content & PathsField & Record & RecordEntry & RecordRefField & Recordable & Singleton {
  SingletonMod: SingletonMod!

  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  _urls: URLs!
  description: String
  email: String
  name: String
  website: String
}

"""
Provides access to various fields and related data for the **Restaurant**, such as state, derivations, previews, views, overlays, and revisions. The availability of certain fields depends on schema configuration and other factors. This type supports querying detailed information, with options for filtering and retrieving specific aspects of the metadata and associated content.
"""
type RestaurantGet {
  """
  Allows access to the various fields for the given **Restaurant**, including globals. Note that any configured `GCASchemaSettings#fieldFilter` settings might affect which fields appear here.
  """
  State: Restaurant

  """
  Gets the current database time. This value can be used as input to save mutations via the lastRead argument as a safeguard against accidentally overwriting data with stale content.
  """
  now: Long!
}

"""
An interface indicating the type is capable of producing a revision that can be surfaced in the CMS RevisionsWidget.
"""
interface RevisionInterface implements Record & Recordable {
  RevisionInterfaceMod: RevisionInterfaceMod!

  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

"""
Group of modifications of the [Revision](#docs-link:RevisionInterface) type, where each field corresponds to a Java class that declares a group of fields.
"""
type RevisionInterfaceMod {
  """
  Modification fields declared by [RevisionModification](#docs-link:RevisionModification).
  """
  RevisionModification: RevisionModification!
}

type RevisionModification {
  """true if the revision is part of a draft's workflow process."""
  isDraftWorkflowItem: Boolean!
  revisionSortDate: String
  revisionSortName: String
  revisionSortObjectId: UUID
}

type RichText {
  marked: MarkedText!
  raw: String!
}

interface RichTextElement implements Record & Recordable {
  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

type RichTextReference {
  alignment: String
  imageSize: String
  label: String
  preview: String
}

"""
The root `query` type, granting access to all the major GCA read operations.
"""
type RootQuery {
  """
  Fetch a single record by a unique identifier. This field is present when there is at least 1 read (or write) content type included as an entry type. See `GCASchemaSettings#getReadEntryTypes` and `GCASchemaSettings#getReadWriteEntryTypes` for more information.
  """
  Get: GetEntry
}

""""""
type SepiaFilter {
  _: Void
}

interface Singleton implements Record & Recordable {
  SingletonMod: SingletonMod!

  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
}

type SingletonData {
  key: String
}

"""
Group of modifications of the [Singleton](#docs-link:Singleton) type, where each field corresponds to a Java class that declares a group of fields.
"""
type SingletonMod {
  """
  Modification fields declared by [SingletonData](#docs-link:SingletonData).
  """
  SingletonData: SingletonData!
}

type SiteCopierObjectModification {
  copySourceId: UUID
  isFromSiteCopier: Boolean
}

input SiteRefInput {
  """Fetch a **Site** instance by its unique Record ID."""
  _id: UUID

  """Fetch a **Site** instance by its unique **Name**."""
  name: String

  """Fetch a **Site** instance by its unique **URLs**."""
  urls: String
}

"""Modification that adds object accessibility information per site."""
type Site__ObjectModification {
  """
  Returns the set of blacklisted sites that aren't allowed to access this object.
  """
  blacklist: [RecordRef]

  """
  Returns the set of consumer sites that are allowed to access the object.
  """
  consumers: [RecordRef]
  isGlobal: Boolean

  """Returns the owner that controls this object."""
  owner: RecordRef
}

"""
An item in a storage system, as represented in the Dari StorageItem Java API.
"""
type StorageItem {
  contentType: String
  httpHeaders(first: Boolean, name: String): Json!
  inStorage: Boolean!
  media: StorageItemMedia
  metadata(key: String): Json
  path: String
  private: Boolean!
  publicUrl: String
  securePublicUrl: String
  storage: String
}

union StorageItemMedia = StorageItemMedia__Image

""""""
type StorageItemMedia__Image {
  """"""
  byline: String

  """"""
  caption: String

  """"""
  copyrightNotice: String

  """"""
  credit: String

  """"""
  crop: ImageCrops

  """"""
  dateTaken: Long

  """"""
  edits: ImageEdits!

  """"""
  focus: ImageFocuses!

  """"""
  height: Int

  """"""
  keywords: [String!]
  location: GeoPoint

  """"""
  orientation: ImageOrientation

  """"""
  source: String

  """"""
  title: String

  """"""
  width: Int
}

type URLs {
  paths: [URLsPath!]!
  permalink(site: SiteRefInput): String
}

type URLsPath {
  path: String
  site: RecordRef
  type: URLsPathType
}

enum URLsPathType {
  ALIAS
  PERMALINK
  REDIRECT
  REDIRECT_TEMPORARY
}

"""A universally unique identifier compliant UUID Scalar"""
scalar UUID

"""
Reserved as the return type for special fields added to types and/or interfaces that would otherwise have no fields. The GraphQL spec does not support empty types and this field return type is used to circumvent that requirement. Fields of this type are named "_" and are marked as @deprecated to signify that they should be ignored.
"""
scalar Void

"""
Users that are interested in "watching" a piece of content for changes.
"""
type WatcherObjectModification {
  removedWatchers: [RecordRef]
  watchers: [RecordRef]
}

type WorkStream__Data {
  completeIds: [String]
}

type WorkflowLog implements Record & Recordable & RevisionInterface {
  RevisionInterfaceMod: RevisionInterfaceMod!

  """Contains global `Modification` fields for this `Record` instance."""
  _globals: Globals!

  """
  The unique ID of the `Record`. Corresponds to the Java method `Record#getId` and `State#getId`.
  """
  _id: ID

  """
  The display name of the `Record` instance. Corresponds to the Java methods `Record#getLabel` and `State#getLabel`.
  """
  _label: String
  comment: RichText
  date: Date

  """true if the revision is related to Drafts."""
  isDraftWorkflowItem: Boolean!
  mainObjectId: UUID
  mainObjectLabel: String
  newWorkflowState: String
  objectId: UUID
  objectLabel: String
  objectTypeId: UUID
  oldWorkflowState: String
  siteId: UUID
  transition: String
  userId: String
  workflowId: UUID
}

type Workflow__Data {
  currentLog: WorkflowLog
  currentState: String
}